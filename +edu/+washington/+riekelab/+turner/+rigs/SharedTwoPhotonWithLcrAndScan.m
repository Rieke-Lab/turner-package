classdef SharedTwoPhotonWithLcrAndScan < symphonyui.core.descriptions.RigDescription
    
    methods
        
        function obj = SharedTwoPhotonWithLcrAndScan()
            import symphonyui.builtin.daqs.*;
            import symphonyui.builtin.devices.*;
            import symphonyui.core.*;
            import edu.washington.*;
            
            daq = HekaDaqController();
            obj.daqController = daq;
            %amp
            amp1 = MultiClampDevice('Amp1', 1).bindStream(daq.getStream('ao0')).bindStream(daq.getStream('ai0'));
            obj.addDevice(amp1);
            %UV LED only
            uvRamp = importdata(riekelab.Package.getCalibrationResource('rigs', 'shared_two_photon', 'uv_led_gamma_ramp.txt'));
            uv = CalibratedDevice('UV LED', Measurement.NORMALIZED, uvRamp(:, 1), uvRamp(:, 2)).bindStream(daq.getStream('ao2'));
            uv.addConfigurationSetting('ndfs', {}, ...
                'type', PropertyType('cellstr', 'row', {'G1', 'G2', 'G3', 'G4', 'G6', 'G7', 'G8', 'G9'}));
            uv.addResource('ndfAttenuations', containers.Map( ...
                {'G1', 'G2', 'G3', 'G4', 'G6', 'G7', 'G8', 'G9'}, ...
                {1.0060, 1.0524, 2.1342, 2.6278, 0.28, 0.59, 1.25, 2.23}));
            uv.addResource('fluxFactorPaths', containers.Map( ...
                {'none'}, {riekelab.Package.getCalibrationResource('rigs', 'shared_two_photon', 'uv_led_flux_factors.txt')}));
            uv.addConfigurationSetting('lightPath', '', ...
                'type', PropertyType('char', 'row', {'', 'below', 'above'}));
            uv.addResource('spectrum', importdata(riekelab.Package.getCalibrationResource('rigs', 'shared_two_photon', 'uv_led_spectrum.txt')));          
            obj.addDevice(uv);
            %temp controller
            temperature = UnitConvertingDevice('Temperature Controller', 'V', 'manufacturer', 'Warner Instruments').bindStream(daq.getStream('ai6'));
            obj.addDevice(temperature);
            %oscilloscope trigger
            trigger = UnitConvertingDevice('Oscilloscope Trigger', Measurement.UNITLESS).bindStream(daq.getStream('doport1'));
            daq.getStream('doport1').setBitPosition(trigger, 0);
            obj.addDevice(trigger);
            %laser scan trigger
            scanTrigger = edu.washington.riekelab.turner.devices.ScanTriggerDevice();
            scanTrigger.bindStream(daq.getStream('doport1'));
            daq.getStream('doport1').setBitPosition(scanTrigger, 1);
            obj.addDevice(scanTrigger);
            %lightcrafter
            lightCrafter = riekelab.devices.LightCrafterDevice('micronsPerPixel', 0.97,'host','SCIENTIFICA-PC');
            lightCrafter.bindStream(daq.getStream('doport1'));
            daq.getStream('doport1').setBitPosition(lightCrafter, 15);
  %             lightCrafter.addConfigurationSetting('ndfs', {}, ...
%                 'type', PropertyType('cellstr', 'row', {'EL1', 'EL2', 'EL3'}));
%             lightCrafter.addResource('ndfAttenuations', containers.Map( ...
%                 {'auto', 'red', 'green', 'blue'}, { ...
%                 containers.Map( ...
%                     {'EL1', 'EL2', 'EL3'}, ...
%                     {0.97, 2.11, 4.23}), ...
%                 containers.Map( ...
%                     {'EL1', 'EL2', 'EL3'}, ...
%                     {0.98, 2.06, 4.09}), ...
%                 containers.Map( ...
%                     {'EL1', 'EL2', 'EL3'}, ...
%                     {0.99, 2.14, 4.29}), ...
%                 containers.Map( ...
%                     {'EL1', 'EL2', 'EL3'}, ...
%                     {0.99, 2.16, 4.40})}));
%             lightCrafter.addResource('fluxFactorPaths', containers.Map( ...
%                 {'auto', 'red', 'green', 'blue'}, { ...
%                 riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_auto_flux_factors.txt'), ...
%                 riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_red_flux_factors.txt'), ...
%                 riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_green_flux_factors.txt'), ...
%                 riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_blue_flux_factors.txt')}));
          lightCrafter.addConfigurationSetting('lightPath', 'above', 'isReadOnly', true);
%             lightCrafter.addResource('spectrum', containers.Map( ...
%                 {'auto', 'red', 'green', 'blue'}, { ...
%                 importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_auto_spectrum.txt')), ...
%                 importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_red_spectrum.txt')), ...
%                 importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_green_spectrum.txt')), ...
%                 importdata(riekelab.Package.getCalibrationResource('rigs', 'confocal', 'lightcrafter_above_blue_spectrum.txt'))}));
            obj.addDevice(lightCrafter);
            %frame monitor
            frameMonitor = UnitConvertingDevice('Frame Monitor', 'V').bindStream(daq.getStream('ai7'));
            obj.addDevice(frameMonitor);
            
            %Filter wheel
                % Add the filter wheel.
            filterWheel = edu.washington.riekelab.devices.FilterWheelDevice('comPort', 'COM3');
            
                % Binding the filter wheel to an unused stream only so its configuration settings are written to each epoch.
            daq = obj.daqController;
            filterWheel.bindStream(daq.getStream('doport1'));
            daq.getStream('doport1').setBitPosition(filterWheel, 15);
            
            obj.addDevice(filterWheel);
        end
        
    end
    
end

